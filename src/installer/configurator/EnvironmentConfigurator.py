import os.path

def _single_stmt_configuration(var_name, var_value):
    var_name = var_name.upper()
    return 'export ' + var_name + '=' + var_value + '\n'

class EnvironmentConfigurator(object):
    def __init__(self, pywikibot_dir, custom_script_dir):
        self._pywikibot_dir = pywikibot_dir
        self._custom_script_dir = custom_script_dir
        self._temp_directory = os.path.join(os.path.dirname(self._custom_script_dir), 'data')

    def is_configured(self):
        return os.path.isfile(
            os.path.join(self._custom_script_dir, 'Environment.sh')
        )

    def configure(self):
        self._create_directory_for_temp_data()
        content_env_file = self._generate_content_for_environment_file()
        content_file_name = os.path.join(self._custom_script_dir, 'Environment.sh')
        file_data = open(content_file_name, 'w')
        file_data.write(content_env_file)
        file_data.close()

    def _create_directory_for_temp_data(self):
        directory = input('Directory for saving temp data? [' + self._temp_directory + '] :')
        if directory:
            self._temp_directory = directory
        os.makedirs(self._temp_directory, mode=0o775)

    def _generate_content_for_environment_file(self):
        content = '# Script autogenerated by Environment Configurator\n'
        content += _single_stmt_configuration('PYTHONPATH', self._pywikibot_dir)
        content += _single_stmt_configuration('PYWIKIBOT2_DIR', self._pywikibot_dir)
        content += _single_stmt_configuration('CUSTOM_SCRIPTS_DIR', self._custom_script_dir)
        content += _single_stmt_configuration(
            'TAUERBOT_LANGUAGE_FILE',
            os.path.join(self._temp_directory, 'lingue')
        )
        content += _single_stmt_configuration(
            'TAUERBOT_REVISION_FILE',
            os.path.join(self._temp_directory, 'revision')
        )
        content += _single_stmt_configuration(
            'TAUERBOT_CONTINUE_TOKEN_FILE',
            os.path.join(self._temp_directory, 'continue')
        )
        return content

    def get_name(self):
        return 'Environment'